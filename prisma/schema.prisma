generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model announcement {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  content    String   @db.VarChar(4000)
  author     Int
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  user       user     @relation(fields: [author], references: [id], onDelete: Cascade)
}

model invitation_status {
  id    Int    @id(map: "invitation_status_pk")
  value String @unique(map: "invitation_status_unique") @db.VarChar
}

model post {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(255)
  content            String               @db.VarChar(4000)
  author             Int
  created_at         DateTime             @db.Timestamp(6)
  updated_at         DateTime             @db.Timestamp(6)
  user               user                 @relation(fields: [author], references: [id], onDelete: Cascade)
  post_assigned_user post_assigned_user[]
  post_invite_user   post_invite_user[]
  reply              reply[]
}

model post_assigned_user {
  user_id Int
  post_id Int
  post    post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user    user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, post_id])
}

model post_invite_user {
  post_id   Int
  user_id   Int
  status_id Int? @default(1)
  post      post @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user      user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([post_id, user_id])
}

model reply {
  id         Int       @id @default(autoincrement())
  content    String    @db.VarChar(2000)
  created_at DateTime? @db.Timestamp(6)
  post_id    Int
  user_id    Int
  post       post      @relation(fields: [post_id], references: [id], onDelete: Cascade)
  user       user      @relation(fields: [user_id], references: [id])
}

model tag {
  id       Int        @id @default(autoincrement())
  feature  String     @unique(map: "tag_unique") @db.VarChar(255)
  tag_user tag_user[]
}

model tag_user {
  tag_id  Int
  user_id Int  @unique
  tag     tag  @relation(fields: [tag_id], references: [id], onDelete: Cascade)
  user    user @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([tag_id, user_id])
}

model user {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(255)
  email              String               @unique(map: "user_unique_1") @db.VarChar(255)
  phone              String?              @db.VarChar(255)
  password           String               @db.VarChar(255)
  created_at         DateTime             @db.Timestamp(6)
  updated_at         DateTime             @db.Timestamp(6)
  user_type_id       Int                  @default(1)
  avatar             String?              @db.VarChar(255)
  announcement       announcement[]
  post               post[]
  post_assigned_user post_assigned_user[]
  post_invite_user   post_invite_user[]
  reply              reply[]
  sessions           session[]
  tag_user           tag_user?
  user_types         user_types           @relation(fields: [user_type_id], references: [id], onDelete: NoAction)
}

model user_types {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(255)
  user user[]
}

model session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
